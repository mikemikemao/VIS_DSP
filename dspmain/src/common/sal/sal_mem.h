/*******************************************************************************
 * sal_mem.h
 *
 * HangZhou Hikvision Digital Technology Co., Ltd. All Right Reserved.
 *
 * Author : heshengyuan <heshengyuan@hikvision.com>
 * Version: V1.0.0  2015年2月9日 Create
 *
 * Description :
 * Modification:
 *******************************************************************************/

#ifndef _SAL_MEM_H_
#define _SAL_MEM_H_

#ifdef __cplusplus
extern "C" {
#endif

/* ========================================================================== */
/*                             头文件区                                       */
/* ========================================================================== */

/* ========================================================================== */
/*                           宏和类型定义区                                   */
/* ========================================================================== */

#define MEMLISTON       //内存管理开关

/* 内存数据段指针到头指针的转换 */
#define SAL_memDataToHead(pData) ((SAL_MemBlockObject *)( ((PhysAddr)(pData)) - sizeof(SAL_MemBlockObject)))

/* 内存的魔数, 用于有效性校验 */
#define SAL_MEM_MAGIC 0x12345678UL

/* 定义申请的内存块对象信息, 为保证效率, 该结构体长度必须为32字节整数倍 */
typedef struct
{
    UINT32      nMgicNum;                   /* 魔数,用于校验内存块有效性。 */
    UINT32      size;                       /* 内存块总的大小, 包括Head和Data */
    void        *pBufBase;                  /* 申请到的基础地址, free时使用 */
} SAL_MemBlockObject;

/* ========================================================================== */
/*                          函数定义区                                        */
/* ========================================================================== */

/*******************************************************************************
* 函数名  : SAL_memAlloc
* 描  述  : 该函数负责在linux用户态中申请内存
* 输  入  : - size:  要申请的内存大小
*        - modId: 模块索引
* 输  出  : 无。
* 返回值  : 非NULL: 申请成功
*           NULL:   申请失败
*******************************************************************************/
Ptr SAL_memAlloc(UINT32 size, const char *modId);

/*******************************************************************************
* 函数名  : SAL_memCalloc
* 描  述  : 该函数在SAL_memUAllocAlign的基础上,增加对内存清0的动作
* 输  入  : - size:  要申请的内存大小
*        - modId: 模块索引
* 输  出  : 无。
* 返回值  : 非NULL:  申请成功
*           NULL:    申请失败
*******************************************************************************/
Ptr SAL_memCalloc(UINT32 size);

/*******************************************************************************
* 函数名  : SAL_memFree
* 描  述  : 系统抽象层下的内存申请封装函数，负责负责释放内存并统计更新当前系统总计使用的内存
* 输  入  : - pPtr:    要释放的内存地址
* 输  出  : 无
* 返回值  : SAL_SOK:   成功,内存已释放
*           SAL_FAIL: 失败, 内存未释放
*******************************************************************************/
INT32 SAL_allocMemFree(Ptr pPtr);

/*******************************************************************************
* 函数名  : SAL_memPageSize
* 描  述  : 获取系统页大大小
* 输  入  : - void:
* 输  出  : 无
* 返回值  : 页大小
*******************************************************************************/
UINT32 SAL_memPageSize(void);

/*******************************************************************************
* 函数名  : SAL_memAlign
* 描  述  : 系统抽象层下的内存申请封装函数，负责申请内存并统计下来，能够保证申请的内存有字节对齐的效果
* 输  入  : - alignSize: 强制字节对齐的长度
*         : - size     : 申请大小
*         : - modId    : 模块标识
* 输  出  : 无
* 返回值  : ptr  : 申请成功的内存地址
*           NULL : 申请失败
*******************************************************************************/
void *SAL_memAlign(UINT32 size, UINT32 alignSize, const char *modId);

/*******************************************************************************
* 函数名  : SAL_memTotalLen
* 描  述  : 统计系统抽象层使用到的全部内存，业务稳定时这个值比较接近真实值
* 输  入  : - void:
* 输  出  : NONE
* 返回值  : 使用的总内存大小
*******************************************************************************/
UINT32 SAL_memTotalLen(void);

/*******************************************************************************
* 函数名  : SAL_memArray2D
* 描  述  : 给二维数组申请内存
* 输  入  : - row: 行
*         : - col: 列
* 输  出  : 无
* 返回值  : 二维数组内存
*******************************************************************************/
UINT32** SAL_memArray2D(UINT32 row, UINT32 col);

/*******************************************************************************
* Function      : SAL_memCpy
* Description   : 封装 memcpy 函数，进行四字节对齐式的快速拷贝
* Input         : - dest  : 目标地址
*               : - src   : 源
*               : - nBytes: 长度
* Output        : NONE
* Return        : HIK_SOK  : Success
*                 HIK_FAIL : Fail
*******************************************************************************/
void SAL_memCpy(INT8 *dest, INT8 *src, UINT32 nBytes);

//free内存后需要指针置空,防止野指针误使用
#define SAL_memFree(pPtr) \
    do \
    { \
        SAL_allocMemFree(pPtr);\
        pPtr = NULL;\
    } \
    while(0)

#ifdef __cplusplus
}
#endif

#endif  /*  _SAL_MEM_H_  */

